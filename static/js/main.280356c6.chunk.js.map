{"version":3,"sources":["hexsweeper.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","element","React","createRef","el","undefined","this","onClick","current","addEventListener","bind","removeEventListener","mask","key","stroke","fill","colour","strokeWidth","d","strokeLinecap","children","i","count","rotation","push","transform","r","cx","cy","mask_children","x","y","width","height","className","maskId","q","Math","random","flagged","makeFlag","makeCircle","revealed","isBomb","makeBomb","makeBombCount","makeHexagon","id","scale","exploded","ref","style","cursor","position","join","Component","CellGrid","w","sqrt","radius","padding","viewBox","elements","Object","values","cells","map","cell","getColour","innerScale","onActivate","FullScreen","overflow","Center","margin","top","left","display","FitScreen","softVariableColour","Q","R","S","abs","IconButton","child","type","size","color","background","Slide","c","next","MdKeyboardArrowRight","prev","MdKeyboardArrowLeft","justifyContent","alignContent","textAlign","marginTop","marginBottom","App","state","seed","Date","getTime","showHelp","activeTool","bombRatio","showNext","helpSlide","toggleHelp","startNewGame","setSlide","setState","chance","Chance","max","min","pickset","keys","floor","length","forEach","b","p","split","parseInt","o","bombCount","flagged_bombs","unrevealed_cells","revealed_bombs","revealCell","toggleFlag","isGameOver","propagateEmpty","propagateBomb","tool","initiateGame","document","body","e","preventDefault","help","MdHelp","score","reduce","v","scoreElement","toFixed","MdFingerprint","setTool","MdFlag","MdArrowForward","MdAutorenew","MdMenu","MdHelpOutline","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.280356c6.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props)\n        this.element=React.createRef()\n        this.el = undefined;\n    }\n\n    // this is a workaround for onClick not working in firefox\n    componentDidMount() { \n        if(this.props.onClick !== undefined) {\n            this.el = this.element.current\n            this.el.addEventListener('click', this.props.onClick.bind(this)); \n        }\n    }\n    componentWillUnmount() { \n        if(this.el !== undefined) {\n            this.el.removeEventListener('click', this.props.onClick.bind(this)); \n        }   \n        this.el = undefined;\n    }\n\n    get q() { return this.props.q || 0; }\n    get r() { return this.props.r || 0; }\n    get revealed() { return this.props.revealed !== undefined ? this.props.revealed : false; }\n    get flagged() { return this.props.flagged !== undefined ? this.props.flagged : false; }\n    get exploded() { return this.props.exploded !== undefined ? this.props.exploded : false; }\n    get count() { return this.props.count !== undefined ? this.props.count : 0; }\n    get isBomb() { return this.count < 0;}\n\n    get colour() { return this.props.colour !== undefined ? this.props.colour : \"white\"; }\n    get position() { return this.props.position !== undefined ? this.props.position : [0, 0]; }\n    get scale() { return this.props.scale !== undefined ? this.props.scale : 1; }\n    get strokeWidth() { return this.props.strokeWidth !== undefined ? this.props.strokeWidth : 0.15 * this.scale; }\n\n    makeHexagon(mask) {\n        return (<path key=\"hexagon\"\n                   stroke=\"none\"\n                   mask={\"url(#\" + mask + \")\"}\n                   fill={this.colour}\n                   strokeWidth={this.strokeWidth}\n                   d='M1.00 0.00L0.50 0.87L-0.50 0.87L-1.00 0.00L-0.50 -0.87L0.50 -0.87Z' />);\n    }\n\n    makeFlag() {\n        return (<path key=\"flag\"\n                      d='M-0.5 0.5L0.5 -0.5M0.5 0.5L-0.5 -0.5'\n                      stroke='black'\n                      strokeLinecap='round'\n                      strokeWidth={this.strokeWidth} />)\n    }\n\n    makeBomb() {\n        return (<path key=\"bomb\"\n                      d='M0 0.6L0 -0.6M0.52 0.3 L-0.52 -0.3M-0.52 0.3 L0.52 -0.3'\n                      stroke='black'\n                      strokeLinecap='round'\n                      strokeWidth={this.strokeWidth} />)\n\n    }\n\n    makeBombCount() {\n        var children = [];\n\n        for(var i=0; i<this.count; i++) {\n            var rotation = 180 + 360 * i / this.count;\n            children.push((<path d='M0 0.4L-0.15 0.1L0.15 0.1Z'\n                                 key={i}\n                                 transform={`rotate(${rotation})`}\n                                 stroke='black'\n                                 strokeWidth={this.strokeWidth} />))\n        }\n        return (<g key=\"bomb count\">{children}</g>);\n    }\n\n    makeCircle() {\n        return (<circle r={0.5}\n                        cx={0}\n                        cy={0}\n                        key={0}\n                        fill=\"none\"\n                        stroke='black'\n                        strokeWidth={this.strokeWidth} />)\n    }\n\n\n    render() {\n        var mask_children = [<rect key=\"bg\" x=\"-2\" y=\"-2\" width=\"4\" height=\"4\" fill=\"white\"/>];\n        var className = \"cell\"\n        var maskId = `circleMask_${this.q}_${this.r}_${Math.random()}`;\n\n        if(this.flagged) {\n            mask_children.push(this.makeFlag());\n            mask_children.push(this.makeCircle());\n            className += \" flagged\"\n        } else if(this.revealed) {\n            className += \" revealed\"\n            if(this.isBomb) {\n                className += \" bomb\"\n                mask_children.push(this.makeBomb())\n            } else {\n                mask_children.push(this.makeCircle());\n                mask_children.push(this.makeBombCount())\n            }\n        }\n\n        var children = [\n            this.makeHexagon(maskId),\n            (<mask key=\"mask\" id={maskId}>{mask_children}</mask>)\n        ];\n\n        var scale = this.scale;\n        if(this.exploded) {\n            scale *= 0.5;\n        }\n\n        return (<g ref={this.element}\n                   className={className}\n                   style={{cursor: \"pointer\"}}\n                   transform={`translate(${this.position.join(',')}), scale(${scale})`}>\n                    {children}\n                </g>)\n    }\n}\n\nclass CellGrid extends React.Component {\n    get getColour() { return this.props.getColour !== undefined ? this.props.getColour : () => \"white\"; }\n    get onActivate() { return this.props.onActivate !== undefined ? this.props.onActivate : () => undefined; }\n\n    get scale() { return this.props.scale !== undefined ? this.props.scale : 1; }\n    get innerScale() { return this.props.innerScale !== undefined ? this.props.innerScale : 0.9 }\n    get radius() { return this.props.radius !== undefined ? this.props.radius : 2; }\n    get padding() { return this.props.padding !== undefined ? this.props.padding : 1; }\n\n    render() {\n        var w = this.scale * Math.sqrt(3) * (2 * (this.radius) + 1 + 2 * this.padding);\n        var viewBox = `-${w/2.} -${w/2.} ${w} ${w}`\n\n        var elements = Object.values(this.props.cells).map(cell => {\n            var q = cell.q;\n            var r = cell.r;\n            var key = q + \",\" + r;\n            var x = this.scale * 3./2 * q;\n            var y = this.scale * (Math.sqrt(3) * r + Math.sqrt(3)/2 * q);\n            return (\n                    <Cell key={key}\n                          {...cell}\n                          colour={this.getColour(cell, this.radius)}\n                          position={[x, y]}\n                          scale={this.innerScale}\n                          onClick={() => this.onActivate(key)}/>\n            )\n        });\n                \n        return (<svg viewBox={viewBox} className=\"hueRotate\">\n            <g>{elements}</g>\n        </svg>)\n    }\n}\n\nexport {Cell, CellGrid};\nexport default CellGrid;\n\n\n","import React from 'react';\nimport {Cell, CellGrid} from './hexsweeper.js';\nimport './App.css';\nimport {MdMenu, MdHelp, MdHelpOutline, MdFlag, MdFingerprint,MdArrowForward, MdAutorenew, MdKeyboardArrowLeft, MdKeyboardArrowRight} from 'react-icons/md';\nimport Chance from 'chance';\n\nfunction FullScreen(props) {\n    return (<div style={{width: '100vw', height: '100vh', overflow: 'hidden', position: \"relative\"}}>\n        {props.children}\n    </div>)\n}\n\nfunction Center(props) {\n    return (<div style={{margin: \"0\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: 'translate(-50%, -50%)'}}>\n        <div style={{display: 'inline-block'}}>\n            {props.children}\n        </div>\n    </div>)\n}\n\nfunction FitScreen(props) {\n    return (<div style={{width: '100vmin', height: '100vmin', position: \"relative\"}}>\n        {props.children}\n    </div>)\n}\n\nfunction softVariableColour(cell, radius, i) {\n    var Q = 0.5 + 0.5 * cell.q / (radius + 2);\n    var R = 0.5 + 0.5 * cell.r / (radius + 2);\n    var S = Math.abs(Q + R) / 2.0;\n    if(cell.revealed) {\n        Q = 1 - Q;\n        R = 1 - R;\n        S = 1 - S;\n        if(cell.count < 0) {\n            Q = Q / 2.;\n            R = R / 2.;\n            S = S / 2.;\n        }\n    } else if(cell.flagged) {\n        Q = Q / 2.;\n        R = R / 2.;\n        S = S / 2.;\n    }\n    return `rgb(${255 * Q},${255 * R}, ${255 * S})`;\n}\n\nfunction IconButton(props) {\n    var style = {\n         display: 'inline-block',\n         background: 'rgba(0, 0, 0, 0.5)',\n         cursor: 'pointer',\n         padding: '0.25em 0.5em',\n    };\n\n    var child = new props.type({\n        size: \"2em\",\n         color: props.color,\n    });\n\n    return (<div className={props.className} style={style} onClick={props.onClick}>{child}</div>);\n}\n\nfunction Slide(props) {\n    if(!props.display)\n        return null;\n\n    var cells = null;\n    if(props.cells !== undefined)\n        cells = props.cells.map((c, i) => {\n            return (\n            <svg key={i} viewBox=\"-1 -1 2 2\" width=\"4em\" height=\"4em\">\n                <Cell fill=\"white\" q={0} r={0} {...c}/>\n            </svg>)\n        });\n\n    var next=null;\n    if(props.next) {\n        next = (<IconButton type={MdKeyboardArrowRight} onClick={() => props.next()}/>)\n    }\n\n    var prev=null;\n    if(props.prev) {\n        prev = (<IconButton type={MdKeyboardArrowLeft} onClick={() => props.prev()}/>)\n    }\n\n\n    return (<div style={{display: \"flex\", width:\"100%\", height:\"100%\",\n                         justifyContent: \"center\",\n                         alignContent: \"center\"}}>\n        <div style={{width: \"50%\", height: \"50%\", textAlign: \"center\",\n                     marginTop: \"auto\", marginBottom: \"auto\"}}>\n            {cells}\n            {props.children}\n            <div>\n                {prev}\n                {next}\n            </div>\n        </div>\n    </div>)\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            radius: 4,\n            seed: new Date().getTime(),\n            showHelp: false,\n            activeTool: 'reveal',\n            cells: {},\n            bombRatio: 0.3,\n            showNext: false,\n            helpSlide: 0,\n        }\n\n        this.toggleHelp = this.toggleHelp.bind(this);\n        this.onActivate = this.onActivate.bind(this);\n        this.startNewGame = this.startNewGame.bind(this);\n        this.setSlide = this.setSlide.bind(this);\n    }\n\n    toggleHelp() {\n        this.setState({\n            helpSlide: 0,\n            showHelp: !this.state.showHelp,\n        });\n    }\n\n    initiateGame() {\n        var chance = new Chance(this.state.seed);\n\n        var cells = {}\n        for(var q=-this.state.radius; q<=this.state.radius; q++)\n            for(var r=Math.max(-this.state.radius, -q -this.state.radius); r<=Math.min(this.state.radius, -q + this.state.radius); r++)\n                cells[q + ',' + r] = {q: q, r: r, 'count': 0, 'flagged': false, 'revealed': false, 'exploded': false}\n\n        var bombs = chance.pickset(Object.keys(cells), Math.floor(this.state.bombRatio * Object.keys(cells).length));\n        bombs.forEach(b => {\n            cells[b].count = -1\n            var p = b.split(',').map(x => parseInt(x));\n            [\n                [+1, 0], [+1, -1], [0, -1],\n                [-1, 0], [-1, +1], [0, +1],\n            ].forEach(o => {\n                var P = [p[0] + o[0], p[1] + o[1]]\n                var key = P.join(',')\n                if(cells[key] !== undefined && cells[key].count !== -1)\n                    cells[key].count += 1\n            });\n        });\n\n       this.setState({\n            cells: cells,\n            showNext: false,\n        });\n    }\n\n    isGameOver() {\n        var bombCount = 0;\n        var flagged_bombs = 0;\n        var unrevealed_cells = 0;\n        var revealed_bombs = 0;\n        for(var cell of Object.values(this.state.cells)) {\n            if(cell.count < 0)\n                bombCount += 1\n\n            if(cell.flagged && cell.count >= 0)\n                return false;\n\n            if(cell.flagged && cell.count < 0)\n                flagged_bombs += 1;\n\n            if(!cell.revealed && !cell.flagged)\n                unrevealed_cells += 1;\n\n            if(cell.revealed && cell.count < 0)\n                revealed_bombs += 1;\n        }\n\n        if(flagged_bombs + revealed_bombs === bombCount)\n            return true;\n\n        if(bombCount - flagged_bombs - revealed_bombs === unrevealed_cells)\n            return true\n\n        return false;\n    }\n\n\n    onActivate(key) {\n        if(this.state.activeTool === 'reveal') \n            this.revealCell(key)\n        else if(this.state.activeTool === 'flag')\n            this.toggleFlag(key)\n        if(this.isGameOver()) {\n            this.setState({\n                showNext: true,\n            });\n        }\n    }\n\n    toggleFlag(key) {\n        var cells = {...this.state.cells};\n        if(!cells[key].revealed) {\n            cells[key].flagged = !cells[key].flagged;\n            this.setState({cells: cells});\n        }\n    }\n\n    revealCell(key) {\n        var cells = {...this.state.cells};\n        if(!cells[key].revealed && !cells[key].flagged) {\n            cells[key].revealed = true;\n            function propagateEmpty(p) {\n                [\n                    [+1, 0], [+1, -1], [0, -1],\n                    [-1, 0], [-1, +1], [0, +1],\n                ].forEach(o => {\n                    var key = `${p.q + o[0]},${p.r + o[1]}`;\n                    var cell = cells[key]\n                    if(cell !== undefined && !cell.revealed && !cell.count >= 0 && !cell.flagged) {\n                         cell.revealed = true\n                         if(cell.count === 0)\n                             propagateEmpty(cell)\n                    }\n                });\n            }\n\n            function propagateBomb(p) {\n                [\n                    [+1, 0], [+1, -1], [0, -1],\n                    [-1, 0], [-1, +1], [0, +1],\n                ].forEach(o => {\n                    var key = `${p.q + o[0]},${p.r + o[1]}`;\n                    var cell = cells[key]\n                    if(cell !== undefined && !cell.revealed && !cell.flagged) {\n                         cell.revealed = true\n                         cell.exploded = true\n                         if(cell.count < 0)\n                             propagateBomb(cell)\n                    }\n                });\n            }\n\n            if(cells[key].count === 0) {\n                propagateEmpty(cells[key]);\n            }\n\n            if(cells[key].count < 0) {\n                cells[key].exploded = true;\n                propagateBomb(cells[key]);\n            }\n            this.setState({cells: cells});\n\n        }\n    }\n\n    setTool(tool) {\n        this.setState({\n            activeTool: tool\n        });\n    }\n\n    startNewGame() {\n        this.setState({\n            seed: new Date().getTime(),\n        }, () => {\n            this.initiateGame();\n        })\n    }\n\n    componentDidMount() {\n        document.body.addEventListener('touchmove', function(e){ e.preventDefault(); });\n        this.initiateGame();\n    }\n\n    setSlide(i) {\n        this.setState({\n            helpSlide: i\n        });\n    }\n\n    render() {\n        var help = null;\n        if(this.state.showHelp) {\n            help = (<div style={{position: \"absolute\",\n                                 top: 0,\n                                 background: \"black\", width: \"100%\", height: \"100%\" }}>\n\n                <Slide display={this.state.helpSlide == 0} cells={[{}]}\n                       next={() => this.setSlide(1)}>\n                    <div>\n                        This is an \"unrevealed\" cell.\n                        It may or may not be hiding a bomb.\n                        You can reveal the contents of a cell by clicking/tapping it.\n                        The goal of this game is to either flag all unrevealed bombs, or to reveal all non-bomb cells.\n                    </div>\n                </Slide>\n\n                <Slide display={this.state.helpSlide == 1} cells={[\n                        {revealed: true, count: 0, flagged: false},\n                        {revealed: true, count: 1, flagged: false},\n                        {revealed: true, count: 2, flagged: false},\n                        {revealed: true, count: 3, flagged: false},\n                        {revealed: true, count: 4, flagged: false},\n                        {revealed: true, count: 5, flagged: false},\n                        {revealed: true, count: 6, flagged: false, scale:1},\n                    ]}\n                    prev={() => this.setSlide(0)}\n                    next={() => this.setSlide(2)}>\n\n                    <div>\n                        These are \"revealed\" cells that didn't hide a bomb.\n                        The shape inside the cell indicates the number of bomb in the neighbouring cells, from 0 to 6.\n                        In general, the number of triangles indicates the number of neighbours with bomb.\n                        Using these, you can sometimes deduce if a specific neighbour hides a bomb.\n                    </div>\n                </Slide>\n\n                <Slide display={this.state.helpSlide == 2} cells={[\n                        {revealed: false, count: 0, flagged: true},\n                    ]}\n                    prev={() => this.setSlide(1)}\n                    next={() => this.setSlide(3)}>\n\n                    <div>\n                        This is a \"flagged\" cell.\n                        You can flag cells by clicking the <span><MdFlag /></span> icon in the bottom left.\n                        This will switch to \"flag\" mode, and any cells you click/tap will be flagged.\n                        You can return to \"reveal\" mode by clickgin the <span><MdFingerprint /></span> button also in the bottom left.\n                    </div>\n                </Slide>\n\n                <Slide display={this.state.helpSlide == 3} cells={[\n                        {revealed: true, count: -1, flagged: false},\n                    ]}\n                    prev={() => this.setSlide(2)}\n                    next={() => this.setSlide(4)}>\n\n                    <div>\n                        This is a revealed \"bomb\" cell.\n                        They will reveal and \"explode\" neighbouring cells.\n                        This can lead to a chain reaction!\n                        Exploded cells will appear as small cells.\n                    </div>\n                </Slide>\n\n\n\n                <Slide display={this.state.helpSlide == 4} \n                    prev={() => this.setSlide(3)}>\n\n                    <div>\n                        You can start a new game by clicking the <span><MdAutorenew /></span>, unless\n                        you've finished the current game, in which case you will see the <span><MdArrowForward /></span> button.\n                        Either can be located in the center of the bottom right of the screen.\n                    </div>\n                </Slide>\n\n                <IconButton type={MdHelp}\n                            className=\"topRight\"\n                            onClick={this.toggleHelp}\n                            color=\"white\"/>\n\n\n\n            </div>)\n        }\n\n        var score = Object.values(this.state.cells).reduce((o,v,i) => {\n            if(v.exploded)\n                return o\n            return o + 1\n        }, 0) * 100 / Object.keys(this.state.cells).length;\n\n        var scoreElement = null;\n        if(this.state.showNext)\n            scoreElement = (<div className=\"top\" color=\"white\">\n                score: {score.toFixed(2)}%\n            </div>)\n\n        return (<div className=\"App\">\n            <FullScreen>\n                <Center>\n                    <FitScreen>\n                        <CellGrid innerScale={0.9}\n                                  radius={this.state.radius}\n                                  cells={this.state.cells}\n                                  getColour={softVariableColour}\n                                  onActivate={this.onActivate}/>\n                    </FitScreen>\n                </Center>\n            </FullScreen>\n\n            <div className=\"bottomLeft\">\n                <IconButton type={MdFingerprint}\n                            onClick={() => this.setTool(\"reveal\")}\n                            color={this.state.activeTool === 'reveal' ? \"green\" : \"white\"}/>\n\n                <IconButton type={MdFlag}\n                            onClick={() => this.setTool(\"flag\")}\n                            color={this.state.activeTool === 'flag' ? \"green\" : \"white\"}/>\n            </div>\n\n            <IconButton type={this.state.showNext ? MdArrowForward : MdAutorenew}\n                        className=\"bottomRight\"\n                        onClick={() => this.startNewGame()}\n                        color=\"yellow\"/>\n\n            <IconButton type={MdMenu}\n                        style={{display: \"none\"}}\n                        className=\"xtopLeft\"\n                        color=\"white\"/>\n\n            <IconButton type={MdHelpOutline}\n                        className=\"topRight\"\n                        onClick={this.toggleHelp}\n                        color=\"white\"/>\n\n            {scoreElement}\n            {help}\n        </div>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}